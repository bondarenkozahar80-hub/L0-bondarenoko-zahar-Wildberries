package main

import (
	"fmt"
	"sync"
)

// Counter — структура-счётчик
type Counter struct {
	mu    sync.Mutex
	value int
}

// Inc безопасно увеличивает счётчик на 1
func (c *Counter) Inc() {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.value++
}

// Value возвращает текущее значение счётчика
func (c *Counter) Value() int {
	c.mu.Lock()
	defer c.mu.Unlock()
	return c.value
}

func main() {
	var wg sync.WaitGroup
	counter := Counter{}

	numGoroutines := 10
	incrementsPerGoroutine := 1000

	wg.Add(numGoroutines)
	for i := 0; i < numGoroutines; i++ {
		go func() {
			defer wg.Done()
			for j := 0; j < incrementsPerGoroutine; j++ {
				counter.Inc()
			}
		}()
	}

	wg.Wait()
	fmt.Println("Итоговое значение счётчика:", counter.Value())
}
