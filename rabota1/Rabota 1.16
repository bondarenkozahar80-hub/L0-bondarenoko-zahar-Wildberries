package main

import "fmt"

// quickSort сортирует срез целых чисел и возвращает новый отсортированный срез
func quickSort(arr []int) []int {
	if len(arr) <= 1 {
		return arr
	}

	pivot := arr[len(arr)/2] // выбираем опорный элемент (середина)
	var left, middle, right []int

	for _, v := range arr {
		if v < pivot {
			left = append(left, v)
		} else if v == pivot {
			middle = append(middle, v)
		} else {
			right = append(right, v)
		}
	}

	// Рекурсивно сортируем левую и правую части
	left = quickSort(left)
	right = quickSort(right)

	// Объединяем результат
	return append(append(left, middle...), right...)
}

func main() {
	arr := []int{5, 3, 8, 4, 2, 7, 1, 6}
	sorted := quickSort(arr)
	fmt.Println("Исходный массив:", arr)
	fmt.Println("Отсортированный массив:", sorted)
}
//В justString хранится только нужные 100 байт.
Исходная большая строка может быть очищена сборщиком мусора.
Нет утечки памяти.
